# students grade tracker
# Ask the user to enter student names and their grades.
# Allow them to:
# Add a student with a grade
# Update a grade
# Display all students and their grades
# Example: { "Alice": 15, "Bob": 12 }


# Phase 1: Structure de base (Commence par √ßa)
# 1. Planification des donn√©es

# Format: {"Alice": 15, "Bob": 12, "Charlie": 18}
# Un dictionnaire o√π cl√© = nom √©tudiant, valeur = note

# 2. Menu principal
# Cr√©e une boucle avec options :
# 1. Add student
# 2. Update grade
# 3. Display all students
# 4. Exit
# 3. Structure de base
# pythondef main():
#     students = {}  # Ton dictionnaire d'√©tudiants
    
#     while True:
        # afficher menu
        # demander choix utilisateur
#         # appeler la bonne fonction
# üõ†Ô∏è Phase 2: Fonctions individuelles
# 4. Fonction add_student()

# Demander le nom de l'√©tudiant
# Demander sa note
# V√©rifier si l'√©tudiant existe d√©j√†
# L'ajouter au dictionnaire

# 5. Fonction update_grade()

# Demander le nom de l'√©tudiant
# V√©rifier s'il existe
# Demander la nouvelle note
# Mettre √† jour le dictionnaire

# 6. Fonction display_students()

# Parcourir le dictionnaire avec .items()
# Afficher nom et note
# G√©rer le cas dictionnaire vide

# üéØ Phase 3: Am√©liorations
# 7. Validation

# Notes entre 0 et 20 (ou ton syst√®me)
# Noms non vides
# Gestion casse (Alice = alice ?)

# 8. Fonctionnalit√©s bonus

# Calculer la moyenne g√©n√©rale
# Trouver meilleur/pire √©l√®ve
# Supprimer un √©tudiant

# üöÄ Questions pour d√©marrer :

# Syst√®me de notation : Sur 20 ? Sur 100 ? Lettres (A,B,C) ?
# Gestion des doublons : Si on ajoute "Alice" deux fois, que faire ?

# Remplacer la note ?
# Refuser l'ajout ?


# Casse des noms : "Alice" et "alice" sont-ils diff√©rents ?

# üí° Ordre recommand√© d'impl√©mentation :
# √âtape 1: Menu + display_students()
# pythonstudents = {"Alice": 15, "Bob": 12}  # Test avec donn√©es
# # Juste afficher pour commencer
# √âtape 2: add_student()
# python# Ajouter sans validation d'abord
# √âtape 3: update_grade()
# python# V√©rifier si √©tudiant existe
# √âtape 4: Validation et gestion d'erreurs
# üîç Points cl√©s √† retenir :

# Dictionnaires : students[nom] = note pour ajouter/modifier
# V√©rification existence : if nom in students:
# Parcours : for nom, note in students.items():
# Dictionnaire vide : if not students:





# def display_students(students):
#     if not students:  # Si dictionnaire vide
#         print("Aucun √©tudiant enregistr√©")
#     else:
#         print("Liste des √©tudiants:")
#         for nom, note in students.items():
#             print(f"‚Ä¢ {nom}: {note}/20")


def main():
    pass  # TODO: implement main logic


if __name__ == "__main__":
    main()